'''
# 연산자 
#  : 프로그램에서 특정한 계산을 위해서 사용하는 기호들을 의미함
# 
# (1) 산술 연산자
#  "+" : 두 피연산자의 더한 결과를 반환
#  "-" : 두 피연산자의 뺀 결과를 반환
#  "*" : 두 피연산자의 곱한 결과를 반환
#  "/" : 두 피연산자의 나눈 결과를 반환
#  "//": 두 피연산자의 정수 나누기 결과를 반환
#        (나누기의 몫을 반환)
#  "%" : 두 피연산자의 나눈 결과의 나머지를 반환
#  "**": 좌측 피연산자를 우측 피연산자의 값으로 거듭제곱 처리 
#        값을 반환

# 예제1] 3과 2를 가지고 위 연산식을 계산 예시들
print("{} + {} = {}".format(3,2,3+2)) 
print("{} - {} = {}".format(3,2,3-2))
print("{} * {} = {}".format(3,2,3*2))
print("{} / {} = {}".format(3,2,3/2))
print("{} // {} = {}".format(3,2,3//2))
print("{} % {} = {}".format(3,2,3%2))
print("{} ** {} = {}".format(3,2,3**2))

# "%" 나머지 연산이 사용되는 곳
#  1) 정수의 짝수/홀수 구할 경우에 사용
#   홀수 :  3 % 2 => 1, 5 % 2 => 1, 7 % 2 => 1
#   짝수 :  2 % 2 => 0, 4 % 2 => 0, 6 % 2 => 0
#  2) 배수 관계를 확인할 때 사용
#   3의 배수 : x % 3 => 0 이면, 3의 배수
#  3) 각 숫자의 자리를 구할 때 사용
#   123 의 값의 각 자리수 구하기 
#   1의 자리 : 123 % 10 => 3
#   10의 자리 : (123 // 10) % 10 => 2
#   100의 자리 : (123 // 100) % 10 => 1
#  4) 범위 내에 숫자를 구할 때
#   어떤 값을 넣어도 1 ~ 6 사이의 값을 출력
#   => (X % 6) + 1
#    X % 6 => 0,1,2,3,4,5    

# (2) 비교 연산자
#  : 두 피연산자의 값을 비교하여 "참(True)" 또는 "거짓(False)"을
#  판별하는 연산자
#  "==":두 피연산자의 값을 비교(같다).
#       같으면 "참", 다르면 "거짓"
#  "!=":두 피연산자의 값을 비교(다르다).
#       같으면 "거짓", 다르면 "참"
#  ">" :두 피연산자의 값을 비교(크다).
#       왼쪽이크면 "참",반대면 "거짓"
#  "<" :두 피연산자의 값을 비교(작다).
#       오른쪽이크면 "참",반대면 "거짓"
#  ">=":두 피연산자의 값을 비교(크거나 같다)
#       왼쪽이 크거나 같으면 "참", 왼쪽이 작으면 "거짓"
#  "<=":두 피연산자의 값을 비교(작거나 같다)
#       오른쪽이 크거나 같으면 "참", 오른쪽이 작으면 "거짓"
print(3==2)     # 거짓(False)
print(3!=2)     # 참(True)
print(3>2)      # 참(True)
print(3<2)      # 거짓(False)
print(3>=2)     # 참(True)
print(3<=2)     # 거짓(False)

# (3) 논리 연산자
#  : 두 피연산자의 값(참/거짓)을 비교하여 참/거짓을 판별하는 연산
#  "and" : 논리곱. 두 피연산자가 둘다 "참"이면 "참"을 반환
#          둘중 하나라도 거짓이면 "거짓" 
#  "or" : 논리합. 두 피연산자 중 하나라도 "참"이면 "참"을 반환
#          둘다 "거짓"이면 "거짓"
#  "not" : 부정. 오른쪽 피연산자의 값이 "참" 이면 "거짓"
#          "거짓"이면 "참" 

# AND : 논리곱
print((1==1) and (1==1))    # 참
print((1==1) and (1==0))    # 거짓
print((1==0) and (1==1))    # 거짓 *short cut연산 :
print((1==0) and (1==0))    # 거짓
# short cut연산이란? 이미 결과가 나온 경우. 이후 연산을 하지 않는
# 것을 의미

# OR : 논리합
print((1==1) or (1==1))    # 참
print((1==1) or (1==0))    # 참
print((1==0) or (1==1))    # 참
print((1==0) or (1==0))    # 거짓

# NOT : 부정
print(not(1==1))            # 거짓
print(not(1==0))            # 참 

# (4) 멤버 연산자
#  : 피연산자 내에 멤버의 존재에 대한 질의
#  "in" : 왼쪽 피연산자가 오른쪽 멤버 중에 일치하는 값이 존재하면
#      "참", 그렇지 않으면 "거짓"
#  "not in" : 왼쪽 피연산자가 오른쪽 멤버 중에 일치하는 값이 없으면
#      "참", 일치하면 "거짓"

# in
print(1 in (1,2,3)) # 참
print(5 in (1,2,3)) # 거짓

# not in
print(1 not in [1,2,3]) # 거짓
print(5 not in [1,2,3]) # 참

# (5) 식별 연산자
#  : 두개의 피연산자를 비교하여 객체 값이 동일한지 아닌지 구분
#  "is" : 두 피연산자의 식별 값을 비교하여 같으면 "참", 
#        다르면 "거짓"
#  "is not" : 두 피연산자의 식별 값을 비교하여 다르면 "참",
#        같으면 "거짓"

# is : 같으면 "참"
print(type(1) is int)   # 참
print(type(1) is str)   # 거짓

# is not : 같지 않으면 "참"
print(type('1') is not int)   # 참
print(type('1') is not str)   # 거짓

# (6) 비트 연산자
#  : 두 피연산자의 bit값을 가지고 처리하는 연산자들을 의미함.
# 
#  "&" : 두 피연산자의 and bit 연산하는 연산자
#      10 & 6 => 0000 1010 (10)
#              & 0000 0110 (6)
#             ==================
#                0000 0010 (2)
#  "|" : 두 피연산자의 or bit 연산하는 연산자 
#      10 | 6 => 0000 1010 (10)
#              | 0000 0110 (6)
#             ==================
#                0000 1110 (14) 
#  "~" : 우측 피연산자에 대한 not bit 연산하는 연산자
#       ~0 =>  ~ 0000 0000 (0)
#             ==================
#                1111 1111 (-1)
#  "^" : 두 피연산자에 대한 XOR(배타적 논리합) bit연산하는 연산자
#       배타적 논리합(XOR)는 두 피연산자 중 하나가 참이면 "참"
#       둘다 참이거나 거짓이면 "거짓", 즉, 둘중 하나만 "참"인 경우
#       "참" 논리연산자
#    15^10 =>   0000 1111 (15)
#             ^ 0000 1010 (10)
#            ===================
#               0000 0101 (5)
#  "<<" : 왼쪽 피연산자의 비트를 오른쪽 연산자의 값만큼 이동(왼쪽)
#      2 << 2   0000 0010 (2)  
#           <<          2
#            =================== 
#               0000 1000 (8)
#  ">>" : 왼쪽 피연산자의 비트를 오른쪽 연산자의 값만큼 이동(오른쪽)
#      8 >> 2   0000 1000 (8)
#           >>          2
#            ===================
#               0000 0010 (2)
#  ** 쉬프트 연산은 2의 배수관계를 이용한 정수 곱하기,정수나누기
 
print(10&2)
print(10|6)
print(~0)
print(15^10)
print(2<<2)
print(8>>2)

# (7) 기타 연산자들
#  "=" : 대입 연산자 => 왼쪽 피연산자에 오른쪽 피연산자를 대입
#  ((복합 대입 연산자))
#  : 복합 대입 연산자란? 대입 연산자와 산술 연산자를 합쳐서 사용
#   하는 연산자를 의미함. "+=", "-=","*=","/=","%=","//="...
#   등이 존재하고, 의미는 왼쪽 피연산자와 오른쪽 피연산자를 산술
#   계산한 후에 왼쪽 피연산자에 값을 저장  

a = 0
a+=10   # a = a + 10 , a = 10
print(a)
a-=5    # a = a - 5 , a = 5
print(a)
a*=5    # a = a * 5 , a = 25
print(a)
a//=5   # a = a // 5 , a = 5
print(a)
a%=3    # a = a % 3 , a = 2
print(a)
a/=2    # a = a / 2 , a = 1.0
print(a)

# 문제] 다음에 대한 답을 적으세요.
# 1) 7>18 참 or 거짓?               # 거짓
# 2) 5<2 참 or 거짓?                # 거짓    
# 3) 6 % 3 > 2 참 or 거짓?          # 거짓
# 4) 5+5 != 2*5 참 or 거짓?         # 거짓
# 5) True == 1 참 or 거짓?          # 참
# 6) 1 == '1' 참 or 거짓?           # 거짓
# 7) 10 // 3 == 10 % 3 참 or 거짓?  # 거짓
# 8) 15 % 4 in (0,1,2) 참 or 거짓?  # 거짓


# 조건식
# if(조건 분기문)
#  -조건식이 참인 경우에는 if의 종속문장을 실행
#  -참이 아닌 경우에는 if의 종속문장을 실행하지 않는다.
#  -if 종속문장을 작성할 경우 "반드시(***)" tab을 통해서 들여쓰기
#  (파이썬은 들여쓰기 "코드 블럭"을 구분)
# 
# (형식)
# if (조건식):
#     종속문장1(if)
#     종속문장2(if)
# (메인 프로그램 실행코드)   

# if의 들여쓰기 잘못된 경우 예
num = int(input("정수 입력 : "))
if num==1:
print("1입력")  # IndentationError

#정상적인 경우 
num = int(input("정수 입력 : "))
if num==1:
    print("1입력")

# 예제1] 입력값 갑ㄷ아서 홀수/짝수 구분하는 예제
num1 = int(input("정수 입력 : "))
if num1 % 2 == 0:
    print("num1의 변수 값은 짝수입니다.!!!")
    print("num1의 변수 값은 2의 배수입니다.!!!")
if num1 % 2 == 1:
    print("num1의 변수 값은 홀수입니다.!!!")
print("프로그램 종료")
'''
# 예제2] 메뉴 선택시 동작 시키는 프로그램
print("====== 메뉴 ======")
print(" 1.Easy Game Start")
print(" 2.Hard Game Start")
print(" 3.Exit")
num2 = int(input("번호선택>>> "))
if num2 == 1:
    print("Easy Game Starting....")
if num2 == 2:
    print("Hard Game Starting....")
if num2 == 3:
    print("Game Exit")

