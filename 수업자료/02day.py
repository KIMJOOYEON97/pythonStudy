'''
# 주석처리 : 프로그램 코드로 동작하지 않고,
#        단순한 설명이나 기술로 처리하는 부분
# 1) 한줄 주석 : "#"
print("1. Hello Python!!!")
# print("2. Hello Python!!!")
print("3. Hello Python!!!")
# print("4. Hello Python!!!")
'''
# 2) 여러줄 주석 : ''' ~ ''' or """ ~ """ 
'''<-주석의 시작
print("1. Hello Python!!!")
print("2. Hello Python!!!")
print("3. Hello Python!!!")
print("4. Hello Python!!!")
주석의 끝->''' '''
print("5. Hello Python!!!")
print("6. Hello Python!!!")
'''
'''
<<파이썬의 특징>>
-가독성
    코드가 간결하고 가독성 높다. 
    코드블럭을 들여쓰기로 구분
-풍부한 라이브러리
    매우 광범위한 라이브러리를 기본으로 포함하고 있고,
    외부 라이브러리가 풍부하여 확장 사용이 쉬움.
-접착성
    쉽게 라이브러리를 추가할 수 있꼬, 
    파이썬에 C로 구현된 부분을 사용할 수 있고
    반대로 C에서 파이썬을 사용할 수 있음.
-무료
    파이썬은 파이썬 소프트웨어 재산에서 관리하고 있고,
    무료와 다름없는 라이센스를 가지고 있음.
-유니코드를 지원
    파이썬에서는 문자열을 모두 유니코드로 사용함.
    유니코드란? 다양한 언어를 표현하는 인코딩 문자
-동적 타이핑
    런타임(프로그램 코드 실행중) 시에 타입체크를 하는
    동적 타이핑을 지원. 즉, 메모리 관리는 자동으로 처리함

<<파이썬을 사용하는 프로젝트>>
 파이썬이 사용되는 프로젝트들이 많이 있는데, 
유명한 것들만 예를 들어보면 아래와 같은 것이 있음.
  BitTorrent, MoinMoin, Scons, Trac, Yum
  CherryPy, Django
  GIMP, Maya, Paint Shop Pro
  Youtube.com, Google Groups, Google Maps, Gmail

--------------------------------------------------
파이썬 2.x와 3.x의 차이점
-print가 함수로 변경.
  2.x style :
    >>> print "welcome to", "python3k"
    welcome to python3k
 
  3.0 style :
    >>> print("welcome to", "python3k")
    welcome to python3k 

-long 자료형이 없어지고 int로 통일.
  2.x style :
    >>> type(2**31)
    <type 'long'> 
    >>> sys.maxint
    2147483647

  3.0 style :
    >>> type(2**31)
    <class 'int'>
    >>> type(2**40)
    <class 'int'> 

-'int / int' 의 결과가 float으로 처리.
  2.x style : 
    >>> 3/2
    1

  3.x style : 
    >>> 3/2
    1.5
    >>> type(2/2)
    <class 'float'>
 
-String, Unicode 체계 변경.
  2.x style :
    >>> type('가')      
    <type 'str'> 
    >>> type(u'가')
    <type 'unicode'>

  3.0 style :
    >>> type('가')
    <class 'str'>
    >>> type('가'.encode('cp949'))
    <class 'bytes'> 

# 이스케이프 문자
# : 문자열을 출력하기 위해서 사용되는 기능 외에 
# 부가적인 사용을 위해서 쓰는 문자들... 
# 
# -"\n" : 줄바꿈 문자(개행문자)
# -"\r" : 해당 줄의 처음으로 커서를 이동
# -"\t" : 출력시 8칸 간격의 생성된 tab간 이동
# -"\'" : 문자열 내에 '문자
# -"\"" : 문자열 내에 "문자
# -"\\" : 문자열 내에 \문자를 사용하기 위해서

# "\n" : 줄바꿈 문자
print("오늘 아침부터 비가와요!!\n날씨는 우중충이네요!!")
print("아침부터 지하철은 많이도 밀렸습니다.!!!\n여러분은?")

# "\r" : 해당 커서의 위치 줄의 맨 앞으로 커서를 이동
print("오늘도 여러분 홧팅합시다.")
print("내일도")
print("오늘도 여러분 홧팅합시다.\r내일도")

# "\t" : 8칸 정도 설정된 tab(기본설정)간 간격 이동
print("여러분\t오늘\t점심은\t뭘먹죠?")
print("I\tam\ta\tstudent")

# "\'", "\"", "\\" 사용 예제
print("\'드디어\' 이틀째 수업이 진행되네요!!")
print("오늘이 \"정말\" 즐겁기를 바랍니다.")
print("오늘 \\을 많이 벌었으면 좋겠어요")

# 파이썬을 이용한 간단한 연산처리
print(10+3)     # 13
print(3*10)     # 30
print(10-5)     # 5
print(3/2)      # 1.5
print("3더하기 10의 결과는 ",3+10,"입니다")
print("3곱하기 10의 결과는 ",3*10,"입니다")
'''
print("PDF 11page 화면출력 예제")
print("\t\t#### 회비 정보 ####")
print("="*50)
print("이름\t\t나이\t전화번호\t회비")
print("="*50)
print("김동완\t\t38\t010-1111-1111\t\\20,000")
print("서지수\t\t24\t010-1234-5678\t\\30,000")
print("이지은\t\t25\t010-2525-2345\t\\50,000")
print("-"*50)
print("총합계\t\t\t\t\t\\100,000")
print("="*50)

# 진법
# : 진법이란 수를 표현하는 방법 중 하나로 정해진 수의 묶음
# 으로 표현하는 방식. 
# 컴퓨터에서 주로 사용하는 진법 2진법,8진법,16진법,10진법(자연수)
# *2진법 : 0,1                  파이썬표현식: 0b
# *8진법 : 0,1,2,3,4,5,6,7      파이썬표현식: 0o
# *10진법 : 0,1,2,3,4,5,6,7,8,9 (그냥 사용)
# *16진법 : 0~9, A(10)~F(15)    파이썬표현식: 0x

# 문제) 123(10진수)을 2진수, 8진수, 16진수 값으로 표현하세요
# 답) 2진수 => 0b1111011, 8진수 => 0o173, 16진수 => 0x7B

# print()는 기본적으로 숫자를 10진수로 출력
print("이진수 0b1111011을 10진수 => ",0b1111011)
print("8진수 0o173을 10진수 => ",0o173)
print("16진수 0x7B를 10진수 => ",0x7B)

# 파이썬에서 진법 변환 함수
# -bin() : 주어진 값을 2진수로 변환
# -oct() : 주어진 값을 8진수로 변환
# -hex() : 주어진 값을 16진수로 변환

# 예제) 123의 값을 각 진법으로 변환하는 예시
print(bin(123))         # 0b1111011
print(oct(0b1111011))   # 0o173
print(hex(0o173))       # 0x7B

## 파이썬의 내장 함수
# -max() : 최대값 구하는 함수
# -min() : 최소값 구하는 함수
# -sum() : 주어진 값의 합을 구하는 함수
# -pow() : 제곱승수 값을 구하는 함수
# -divmod() : 나누기를 구하는 함수(몫,나머지)

print(max(2,3,5,-7,9,-8,1))     # 9
print(min(2,3,5,-7,9,-8,1))     # -8
print(sum([2,3,5,-7,9,-8,1]))   # 5
print(pow(10,3))                # 1000
print(divmod(10,3))             # (3,1)




